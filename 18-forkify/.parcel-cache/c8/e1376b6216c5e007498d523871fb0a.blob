"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class View {
  _data;

  render(data) {
    // Check if data actually exists
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;

    const markup = this._generateMarkup();

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  _clear() {
    this._parentElement.innerHTML = '';
  }

  renderSpinner() {
    const markup = `
    <div class="spinner">
      <svg>
        <use href="${_icons.default}#icon-loader"></use>
      </svg>
    </div>`;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderError() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._errorMessage;
    const markup = `
        <div class="error">
            <div>
              <svg>
                <use href="${_icons.default}#icon-alert-triangle"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
        `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderMessage() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._message;
    const markup = `
        <div class="message">
            <div>
              <svg>
                <use href="${icon}#icon-smile"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
        `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  update(data) {
    this._data = data;

    const newMarkup = this._generateMarkup(); // create new DOM objects (like a DOM not living in the page but in our memory)


    const newDOM = document.createRange().createContextualFragment(newMarkup); // create an array from the DOM object

    const newElements = Array.from(newDOM.querySelectorAll('*'));
    const curElements = Array.from(this._parentElement.querySelectorAll('*'));
    newElements.forEach((newEl, i) => {
      const curEl = curElements[i]; // console.log(curEl, newEl.isEqualNode(curEl));
      // Updates changed TEXT

      if (!newEl.isEqualNode(curEl) && newEl.firstChild?.nodeValue.trim() !== '') {
        // console.log('ðŸ’¥', newEl.firstChild.nodeValue.trim());
        curEl.textContent = newEl.textContent;
      } // Updates changed ATTRIBUTES


      if (!newEl.isEqualNode(curEl)) Array.from(newEl.attributes).forEach(attr => curEl.setAttribute(attr.name, attr.value));
    });
  }

}

exports.default = View;