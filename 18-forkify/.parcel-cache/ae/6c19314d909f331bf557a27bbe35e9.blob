"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _view = _interopRequireDefault(require("./view"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class PaginationView extends _view.default {
  _parentElement = document.querySelector('.results'); // The generateMarkup name is standard because it will be called by View.render()

  _generateMarkup() {
    const curPage = this._data.page;
    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage); //   Page 1 and there are other pages

    if (this._data.page === 1 && numPages > 1) {
      return this._generateButtonMarkup('next');
    } //   Last page


    if (this._data.page === numPages && numPages > 1) {
      return this._generateButtonMarkup('prev');
    } //   Other page


    if (this._data.page < numPages) {
      return this._generateButtonMarkup('next') + this._generateButtonMarkup('prev');
    } //   Page 1 an there are NO other pages


    return;
  }

  _generateButtonMarkup(type) {
    return `
          <button class="btn--inline pagination__btn--${type === 'next' ? 'next' : 'prev'}">
            <span>Page ${type === 'next' ? curPage + 1 : curPage - 1}</span>
            <svg class="search__icon">
              <use href="${_icons.default}#icon-arrow-${type === 'next' ? 'right' : 'left'}"></use>
            </svg>
          </button>        
        `;
  }

}

var _default = new PaginationView();

exports.default = _default;